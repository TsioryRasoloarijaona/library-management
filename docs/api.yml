openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22109
servers:
  - url: https://library.com

paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/book'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Cupdatebook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/book'



  /authors:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'


  /books/{bookId}/authors/{authorId}:
    put :
      summary: associate a book with an author
      operationId: combine
      tags:
        - Books
      parameters:
        - name: bookId
          in: path
          schema:
            type: string
          required: true
        - name: authorId
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: associated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'

  /topic:

    get:

      summary: get all topic
      operationId: get
      tags:
        - topic
      parameters:
        - name: topicName
          in: query
          required: false
          description: |
           get all topic by its name if there is no parameters get all
          schema:
            type: string

      responses:
        200:
          description: get topics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'


    put:
      summary: create or update a topic
      operationId: crupdate
      tags:
        - topic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      responses:
        200:
          description: new topic


  /topic/{topicId}:
    delete:
      summary: delete a topic
      operationId: delete
      tags:
        - topic
      parameters:
        - name: topicId
          in: path
          description: topic identifier to delete

          schema:
            type: string
          required: true
      responses:
        200:
          description: the deleted topic
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'


  /book/{bookId}/topic/{topicId}:
    put:
      summary: associate a topic to all books
      operationId: combine
      tags:
        - topic
      parameters:
        - name: bookId
          in: path
          schema:
            type: string
            required: true
        - name: topicId
          in: path
          schema:
            type: string
            required: true
      responses:
        200:
          description: done





components:
  schemas:
    Cupdatebook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string

        pageNumbers:
          type: integer


        releaseDate:
          type: string
          format: date
    book:
      properties:
        author:
          type: object
          items:
            $ref: '#/components/schemas/Author'
      allOf:
        - $ref: '#/components/schemas/Cupdatebook'





    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F

    Topic:
      type: object
      properties:
        topicId:
          type: string
        topicName:
          type: string