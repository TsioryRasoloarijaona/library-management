openapi: 3.0.3
info:
  title: Library API
  version: 1.0.1
  description: STD22109
servers:
  - url: https://library.com

paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - $ref: '#/components/parameters/queryPage'
        - $ref: '#/components/parameters/queryPageSize'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'




    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Cupdatebook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/book'

  /book/{availability}:
    get:
      tags:
        - Books
      description: get all available book
      operationId: get
      parameters:
        - in: path
          name: availability
          schema:
            type: string
            required: true
            default: available
      responses:
        '200':
          $ref: '#/components/responses/200'



  /book/{page}/{pageSize}:
    get:
      summary: get all book with the page specification
      operationId: filter by page
      tags:
        - Books
      description: the will be ordered by its page number
      parameters:
        - in: path
          name: page
          description: filter book its pages number
          schema:
            type: integer
            required: false
            default: 1
        - in: path
          name: pageSize
          description: filter book by its page size
          schema:
            type: integer
            required: false
            default: 50
      responses:
        200:
          description: the list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/book'

  /books/import:
    post:
      summary: import the list of book
      operationId: import
      tags:
        - Books
      requestBody:
        content:
         application/json:
           schema:
             items:
               $ref: '#/components/schemas/book'



      responses:
        '200':
          $ref: '#/components/schemas/book'

  /authors/import:
    post:
      summary: import the list of author
      operationId: import
      tags:
        - Authors
      requestBody:
          $ref:  '#/components/requestBodies/importBooks'



      responses:
        '200':
          $ref: '#/components/schemas/Author'

  /books/authors:
    put:
      summary: associate more than one book and authors
      operationId: combine
      tags:
        - Books
      description: update more than one books and authors
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/updateBookAuthor'
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/updateBookAuthor'

  /authors:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'

  /author/{page}/{pageSize}:
    get:
      summary: pagination
      operationId: number of data
      parameters:
        - $ref: '#/components/parameters/PathPage'
        - $ref: '#/components/parameters/pathPageSize'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'


  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'


  /books/{bookId}/authors/{authorId}:
    put :
      summary: associate a book with an author
      operationId: combine
      tags:
        - Books
      parameters:
        - name: bookId
          in: path
          schema:
            type: string
          required: true
        - name: authorId
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: associated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'

  /topic:

    get:

      summary: get all topic
      operationId: get
      tags:
        - topic
      parameters:
        - name: topicName
          in: query
          required: false
          description: |
           get all topic by its name if there is no parameters get all
          schema:
            type: string

      responses:
        200:
          description: get topics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'


    put:
      summary: create or update a topic
      operationId: crupdate
      tags:
        - topic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      responses:
        200:
          description: new topic


  /topic/{topicId}:
    delete:
      summary: delete a topic
      operationId: delete
      tags:
        - topic
      parameters:
        - name: topicId
          in: path
          description: topic identifier to delete

          schema:
            type: string
          required: true
      responses:
        200:
          description: the deleted topic
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'



  /book/{bookId}/topic/{topicId}:
    put:
      summary: associate a topic to all books
      operationId: combine
      tags:
        - topic
      parameters:
        - name: bookId
          in: path
          schema:
            type: string
            required: true
        - name: topicId
          in: path
          schema:
            type: string
            required: true
      responses:
        200:
          description: done

  /costumer:
      post:
       description: book reader
       operationId: post
       tags:
         - visitor
       requestBody:
         content:
           application/json:
             schema:
               items:
                 $ref: '#/components/schemas/landBook'
       responses:
         '200':
           $ref: '#/components/responses/200'



  /book/topic:
    put:
      summary: associate books to topics
      operationId: combine
      tags:
        - topic
      description: this combine some books to topics
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/updateBookTopic'
      responses:
        200:
          description: list of updated books
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/updateBookTopic'

  /authorTopic:
    get:
      summary: get author and books
      operationId: author and topic
      tags:
        - topic
      responses:
        200:
          description: list of author and topic
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/authorsTopic'







components:
  schemas:
    visitor :
      type: object
      properties:
        visitorId:
          type: integer
        visitorName :
          type: string
        reference:
          type: string

    landBook:
      type: object
      properties:
        bookId:
          type: string
        visitorId:
          type: integer

    bookVisitor:
      type: object
      allOf:
        - $ref: '#/components/schemas/book'
        - $ref: '#/components/schemas/visitor'

    Cupdatebook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        availability:
          type: string
          enum:
            - available
            - not available



        releaseDate:
          type: string
          format: date
    book:
      properties:
        author:
            $ref: '#/components/schemas/Author'
      allOf:
        - $ref: '#/components/schemas/Cupdatebook'



    updateBookAuthor:
      properties:
        idBook:
          type: string
        idAuthor:
          type: string



    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F

    Topic:
      type: object
      properties:
        topicId:
          type: string
        topicName:
          type: string


    updateBookTopic:
      type: object
      properties:
        topicId:
          type: string
        bookId:
          type: string

    authorsTopic:
      allOf:
        - $ref: '#/components/schemas/Topic'
          type: object
      properties:
        author:
          $ref: '#/components/schemas/Author'

    authorExel:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/Author'







  parameters:
    queryPage:
        in: query
        name: page
        description: if `page` is not provided , the value will be 1 .
        schema:
          type: integer
          required: false
          default: 1


    queryPageSize:
        in: query
        name: pageSize
        description: if `pageSize` is not provided , the value will be 50 .
        schema:
          type: integer
          required: false
          default: 50

    PathPage:
      in: path
      name: page
      description: if `page` is not provided , the value will be 1 .
      schema:
        type: integer
        required: false
        default: 1

    pathPageSize:
      in: path
      name: pageSize
      description: if `pageSize` is not provided , the value will be 50 .
      schema:
        type: integer
        required: false
        default: 50

  responses:
    error:
      description: bad request
    '200':
      description: ok
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/book'
              - $ref: '#/components/schemas/Author'
              - $ref: '#/components/schemas/bookVisitor'


    '400':
      description: internal server error
      content:
        $ref: '#/components/responses/error'

    '403':
      description: forbiden
      content:
        $ref: '#/components/responses/error'

    '500':
      description: internal server error
      content:
        $ref: '#/components/responses/error'


  requestBodies:
     importAuthors:
       description: json/exel
       required: true
       content:

         application/vnd.ms-excel:
           schema:
             items:
               $ref: '#/components/schemas/Author'
         appication/json:
           schema:
             items:
               $ref: '#/components/schemas/Author'


     importBooks:
         description: json/exel
         required: true
         content:

           appication/json:
             schema:
               items:
                 $ref: '#/components/schemas/book'

           application/vnd.ms-excel:
             schema:
               items:
                 $ref: '#/components/schemas/book'

























